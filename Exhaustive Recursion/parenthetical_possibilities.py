'''
Write a function, parenthetical_possibilities, that takes in a string as an argument. 
The function should return an array containing all of the strings that could be generated by 
expanding all parentheses of the string into its possibilities.

For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.
'''

# My Solution

def parenthetical_possibilities(s):
  if len(s) == 0:
    return [""]
  
  result = []
  choices, remainder = get_options(s)
  for choice in choices:
    possibilities = parenthetical_possibilities(remainder)
    for possibility in possibilities:
      result.append(choice + possibility)
  
  return result


def get_options(s):
  if s[0] == "(":
    end = s.index(")")
    choices = s[1 : end]
    remainder = s[end + 1:]
    return (choices, remainder)
  else:
    return (s[0], s[1:])

# Instructors Solution

# Recursive

def parenthetical_possibilities(s):
  if len(s) == 0:
    return ['']
  remaining, chars = get_options(s)
  suffixes = parenthetical_possibilities(remaining)
  possibilities = []
  for char in chars:
    possibilities += [ char + suffix for suffix in suffixes ]
  return possibilities
  
def get_options(s):
  if s[0] == '(':
    idx = s.index(')')
    chars = s[1:idx]
    remaining = s[idx + 1:]
    return ( remaining, chars )
  else:
    chars = s[0]
    remaining = s[1:]
    return ( remaining, chars )

'''
n = length of the string, m = length of largest parenthetical group
Time: ~O(m^n)
Space: ~O(m^n)
'''

# Test Cases

# Test 0

parenthetical_possibilities('x(mn)yz') # -> 
# [ 'xmyz', 'xnyz' ]

# Test 1

parenthetical_possibilities("(qr)ab(stu)c") # ->
# [ 'qabsc', 'qabtc', 'qabuc', 'rabsc', 'rabtc', 'rabuc' ]

# Test 2

parenthetical_possibilities("taco") # ->
# ['taco']

# Test 3

parenthetical_possibilities("") # ->
# ['']

# Test 4

parenthetical_possibilities("(etc)(blvd)(cat)") # ->
# [
#  'ebc', 'eba', 'ebt', 'elc', 'ela',
#  'elt', 'evc', 'eva', 'evt', 'edc',
#  'eda', 'edt', 'tbc', 'tba', 'tbt',
#  'tlc', 'tla', 'tlt', 'tvc', 'tva',
#  'tvt', 'tdc', 'tda', 'tdt', 'cbc',
#  'cba', 'cbt', 'clc', 'cla', 'clt',
#  'cvc', 'cva', 'cvt', 'cdc', 'cda',
#  'cdt'
# ]
